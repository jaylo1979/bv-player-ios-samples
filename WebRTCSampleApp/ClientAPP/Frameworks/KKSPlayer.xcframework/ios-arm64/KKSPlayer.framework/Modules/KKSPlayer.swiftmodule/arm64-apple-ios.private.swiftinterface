// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KKSPlayer
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CoreMedia
import Foundation
import GPUImage_iOS
import HLSParser
@_exported import KKSPlayer
import MediaPlayer
import MillicastSDK
import Swift
import SwiftWebVTT
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSubtitleTrack : KKSPlayer.UniTrack {
  @objc deinit
}
public protocol UniSourceListener : ObjectiveC.NSObjectProtocol {
  func source(_ source: KKSPlayer.UniSource, didReceiveSourceErrorEvent event: KKSPlayer.UniSourceErrorEvent)
}
extension KKSPlayer.UniSourceListener {
  public func source(_ source: KKSPlayer.UniSource, didReceiveSourceErrorEvent event: KKSPlayer.UniSourceErrorEvent)
}
public enum PLLogSeverity : Swift.Int, Swift.CustomStringConvertible, Swift.CaseIterable {
  case verbose, debug, info, warning, error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [KKSPlayer.PLLogSeverity]
  public typealias RawValue = Swift.Int
  public static var allCases: [KKSPlayer.PLLogSeverity] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class UniSource : ObjectiveC.NSObject {
  final public var sourceConfig: KKSPlayer.UniSourceConfig {
    get
  }
  @objc deinit
  final public func add(listener: KKSPlayer.UniSourceListener)
  final public func remove(listener: KKSPlayer.UniSourceListener)
}
extension KKSPlayer.UniSource {
  final public func thumbnail(forTime time: Foundation.TimeInterval) -> KKSPlayer.UniThumbnail?
}
public struct UniControlViewConfig {
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UniPlayerControlView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect = .zero, config: KKSPlayer.UniControlViewConfig)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniBufferMediaTypeConfig {
  public var forwardDuration: Foundation.TimeInterval
  public var audioTimePitchAlgorithm: AVFoundation.AVAudioTimePitchAlgorithm
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniBufferConfig {
  public var audioAndVideo: KKSPlayer.UniBufferMediaTypeConfig
  @objc deinit
}
public struct UniVideoQuality : Swift.Comparable {
  public static func < (lhs: KKSPlayer.UniVideoQuality, rhs: KKSPlayer.UniVideoQuality) -> Swift.Bool
  public let bitrate: Swift.UInt
  public let width: Swift.UInt
  public let height: Swift.UInt
  public static func == (a: KKSPlayer.UniVideoQuality, b: KKSPlayer.UniVideoQuality) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers final public class RTCPlayer : ObjectiveC.NSObject {
  final public var volume: Swift.Float {
    get
    set
  }
  final public var isMuted: Swift.Bool {
    get
    set
  }
  final public var isConnected: Swift.Bool {
    get
  }
  final public var isSubscribed: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  final public func load(sourceConfig: KKSPlayer.RTCSourceConfig)
  final public func unload()
  final public func destroy()
  @objc deinit
}
public enum AppInfo {
  public static var moduleVersion: Swift.String {
    get
  }
  public static var deviceID: Swift.String {
    get
  }
}
public enum UniEventName : Swift.String {
  case unknown
  case ready
  case playing
  case paused
  case timeChanged
  case seek
  case seeked
  case stallStarted
  case stallEnded
  case playbackFinished
  case audioChanged
  case subtitleChanged
  case sourceLoad
  case sourceLoaded
  case sourceUnload
  case sourceUnloaded
  case videoPlaybackQualityChanged
  case playbackSpeedChanged
  case sourceError
  case muted
  case unmuted
  case audioVolumeChanged
  case playerError
  case timeShift
  case timeShifted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UniEvent {
  var timestamp: Foundation.TimeInterval { get }
  var name: KKSPlayer.UniEventName { get }
}
@_hasMissingDesignatedInitializers public class UniPlayerEvent : KKSPlayer.UniEvent {
  final public let timestamp: Foundation.TimeInterval
  public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniReadyEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlayingEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPausedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniTimeChangedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  final public let currentTime: Foundation.TimeInterval
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniSeekEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  final public let from: KKSPlayer.SeekPosition
  final public let to: KKSPlayer.SeekPosition
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSeekedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SeekPosition {
  final public let time: Foundation.TimeInterval
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniStallStartedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniStallEndedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackFinishedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniAudioChangedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  final public let audioTrackNew: KKSPlayer.UniAudioTrack
  final public let audioTrackOld: KKSPlayer.UniAudioTrack?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniSubtitleChangedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  final public let subtitleTrackNew: KKSPlayer.UniSubtitleTrack?
  final public let subtitleTrackOld: KKSPlayer.UniSubtitleTrack?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniVideoPlaybackQualityChangedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  final public let videoQualityNew: KKSPlayer.UniVideoQuality
  final public let videoQualityOld: KKSPlayer.UniVideoQuality?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniPlaybackSpeedChangedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  final public let from: Swift.Float
  final public let to: Swift.Float
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniSourceErrorEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  final public let code: KKSPlayer.SourceErrorCode
  final public let message: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniMutedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniUnmutedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniAudioVolumeChangedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniTimeShiftEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniTimeShiftedEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
public class UniPlaybackConfig {
  public var isAutoplayEnabled: Swift.Bool
  public var isMuted: Swift.Bool
  public init()
  @objc deinit
}
public protocol UniFullscreenHandler : ObjectiveC.NSObjectProtocol {
  var isFullscreen: Swift.Bool { get }
  func onFullscreenRequested()
  func onFullscreenExitRequested()
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setImage(with url: Foundation.URL?, completion: ((UIKit.UIImage?) -> Swift.Void)? = nil)
}
public struct UniThumbnail {
  public let start: Foundation.TimeInterval
  public let end: Foundation.TimeInterval
  public let text: Swift.String
  public let url: Foundation.URL
  public let px: Swift.UInt
  public let py: Swift.UInt
  public let width: Swift.UInt
  public let height: Swift.UInt
}
public let pLog: KKSPlayer.PLPrioritizingLogSystem
@_hasMissingDesignatedInitializers public class PLPrioritizingLogSystem {
  public func setEnabled(_ isEnabled: Swift.Bool)
  public var pitches: [KKSPlayer.PLLogPitch]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class UniThumbnailTrack : KKSPlayer.UniTrack {
  public init(url: Foundation.URL, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool)
  @objc deinit
}
public protocol RTCRenderViewEventDelegate : ObjectiveC.NSObjectProtocol {
  func rednerView(_ view: KKSPlayer.RTCRenderView, didTapAtPoint point: CoreFoundation.CGPoint)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class RTCRenderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: KKSPlayer.RTCRenderViewEventDelegate?
  @_Concurrency.MainActor(unsafe) public init(player: KKSPlayer.RTCPlayer, frame: CoreFoundation.CGRect = .zero)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UniTweaksConfig {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniDrmConfig {
  public var licenseUrl: Foundation.URL?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniFairPlayConfig : KKSPlayer.UniDrmConfig {
  public var certificateUrl: Foundation.URL?
  public var licenseRequestHeaders: [Swift.String : Swift.String]?
  public var certificateRequestHeaders: [Swift.String : Swift.String]?
  public init(licenseUrl: Foundation.URL?, certificateUrl: Foundation.URL)
  public var prepareMessage: ((_ spcData: Foundation.Data, _ assetID: Swift.String) -> Foundation.Data?)?
  public var prepareCertificate: ((_ certificate: Foundation.Data) -> Foundation.Data)?
  public var prepareLicense: ((_ ckc: Foundation.Data) -> Foundation.Data)?
  @objc deinit
}
public enum UniUIEventName : Swift.String {
  case unknown
  case settingPressed
  case controlViewChanged
  case infoPressed
  case sharePressed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UniUIEventProtocol {
  var timestamp: Foundation.TimeInterval { get }
  var name: KKSPlayer.UniUIEventName { get }
}
@_hasMissingDesignatedInitializers public class UniUIEvent : KKSPlayer.UniUIEventProtocol {
  final public let timestamp: Foundation.TimeInterval
  public var name: KKSPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSettingPressedEvent : KKSPlayer.UniUIEvent {
  override public var name: KKSPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniControlViewChangedEvent : KKSPlayer.UniUIEvent {
  override public var name: KKSPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniInfoPressedEvent : KKSPlayer.UniUIEvent {
  override public var name: KKSPlayer.UniUIEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniSharePressedEvent : KKSPlayer.UniUIEvent {
  override public var name: KKSPlayer.UniUIEventName {
    get
  }
  final public let sharedURL: Foundation.URL?
  @objc deinit
}
public protocol UniUserInterfaceListener : ObjectiveC.NSObjectProtocol {
  func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveSettingPressed event: KKSPlayer.UniUIEvent)
  func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveControlViewChanged event: KKSPlayer.UniControlViewChangedEvent)
  func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveInfoPressed event: KKSPlayer.UniUIEvent)
  func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveSharePressed event: KKSPlayer.UniSharePressedEvent)
}
extension KKSPlayer.UniUserInterfaceListener {
  public func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveSettingPressed event: KKSPlayer.UniUIEvent)
  public func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveControlViewChanged event: KKSPlayer.UniControlViewChangedEvent)
  public func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveInfoPressed event: KKSPlayer.UniUIEvent)
  public func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveSharePressed event: KKSPlayer.UniSharePressedEvent)
}
public enum UniPlayerViewStyle {
  case embedded
  case standalone
  public static func == (a: KKSPlayer.UniPlayerViewStyle, b: KKSPlayer.UniPlayerViewStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UniPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var styleConfig: KKSPlayer.UniStyleConfig
  @_Concurrency.MainActor(unsafe) public var showsPlaybackControls: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var managesPlaybackControlsAutomatically: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var fullscreenHandler: KKSPlayer.UniFullscreenHandler?
  @_Concurrency.MainActor(unsafe) public init(player: KKSPlayer.UniPlayer, frame: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func enterFullscreen()
  @_Concurrency.MainActor(unsafe) public func exitFullscreen()
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnReadyEvent event: KKSPlayer.UniEvent)
}
extension KKSPlayer.UniPlayerView : KKSPlayer.UniPlayerListener {
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPlayingEvent event: KKSPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPausedEvent event: KKSPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnTimeChangedEvent event: KKSPlayer.UniTimeChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSeekEvent event: KKSPlayer.UniSeekEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSeekedEvent event: KKSPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnStallStartedEvent event: KKSPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnStallEndedEvent event: KKSPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPlaybackFinishedEvent event: KKSPlayer.UniEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSourceLoadEvent event: KKSPlayer.UniSourceLoadEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnAudioChangedEvent event: KKSPlayer.UniAudioChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSubtitleChangedEvent event: KKSPlayer.UniSubtitleChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnVideoQualityChangedEvent event: KKSPlayer.UniVideoPlaybackQualityChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceivePlaybackSpeedChangedEvent event: KKSPlayer.UniPlaybackSpeedChangedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceUnloadEvent event: KKSPlayer.UniSourceUnloadEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceUnloadedEvent event: KKSPlayer.UniSourceUnloadedEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceErrorEvent event: KKSPlayer.UniSourceErrorEvent)
  @_Concurrency.MainActor(unsafe) public func player(_ player: KKSPlayer.UniPlayer, didReceiveErrorEvent event: KKSPlayer.UniPlayerErrorEvent)
}
extension KKSPlayer.UniPlayerView {
  @_Concurrency.MainActor(unsafe) public func add(listener: KKSPlayer.UniUserInterfaceListener)
  @_Concurrency.MainActor(unsafe) public func remove(listener: KKSPlayer.UniUserInterfaceListener)
}
extension KKSPlayer.UniPlayerView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
extension KKSPlayer.UniPlayerView : KKSPlayer.UniSourceListener {
  @_Concurrency.MainActor(unsafe) public func source(_ source: KKSPlayer.UniSource, didReceiveSourceErrorEvent event: KKSPlayer.UniSourceErrorEvent)
}
public enum RTCEventName : Swift.String {
  case unknown
  case connected
  case subscribed
  case processAudio
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol RTCEvent {
  var timestamp: Foundation.TimeInterval { get }
  var name: KKSPlayer.RTCEventName { get }
}
@_hasMissingDesignatedInitializers public class RTCRootEvent : KKSPlayer.RTCEvent {
  final public let timestamp: Foundation.TimeInterval
  public var name: KKSPlayer.RTCEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RTCConnectedEvent : KKSPlayer.RTCRootEvent {
  override public var name: KKSPlayer.RTCEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RTCSubscribedEvent : KKSPlayer.RTCRootEvent {
  override public var name: KKSPlayer.RTCEventName {
    get
  }
  @objc deinit
}
public protocol RTCSubscriberEventListener : ObjectiveC.NSObjectProtocol {
  func playerDidConnect(_ player: KKSPlayer.RTCPlayer)
  func playerDidSubscribe(_ player: KKSPlayer.RTCPlayer)
  func playerDidProcessAudio(_ player: KKSPlayer.RTCPlayer)
  func player(_ player: KKSPlayer.RTCPlayer, didReceiveError error: Swift.String)
}
@_hasMissingDesignatedInitializers public class PLLogPitch {
  final public let createdDate: Foundation.Date
  final public let logSeverity: Swift.Int
  final public let file: Swift.String
  final public let line: Swift.Int
  final public let method: Swift.String
  final public let message: Swift.String
  @objc deinit
}
extension KKSPlayer.PLLogPitch : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class UniSourceEvent : KKSPlayer.UniEvent {
  final public let timestamp: Foundation.TimeInterval
  public var name: KKSPlayer.UniEventName {
    get
  }
  final public let source: KKSPlayer.UniSource
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSourceLoadEvent : KKSPlayer.UniSourceEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSourceLoadedEvent : KKSPlayer.UniSourceEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSourceUnloadEvent : KKSPlayer.UniSourceEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSourceUnloadedEvent : KKSPlayer.UniSourceEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UniSettingViewController : KKSPlayer.UniUITableViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public init(player: KKSPlayer.UniPlayer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniLogEvent {
  public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  public var properties: [KKSPlayer.UniLogEvent.PropertyName : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlayerLoadingLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlayerStartedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackStartedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackPausedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackBufferBeganLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackBufferEndedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackSeekBeganLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackSeekEndedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackBeganLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackEndedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniVideoQualityChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniVideoSubtitleChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniVideoAudioTrackChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniAudioMuteChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPlaybackErrorLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSpeedChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniAudioVolumeChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiVideoQualityChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiSpeedChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiAudioTrackChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiSubtitleChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiAudioVolumeChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiAudioMuteChangedLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiPlayLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiPauseLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiSeekLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiRewindLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniApiForwardLogEvent : KKSPlayer.UniLogEvent {
  override public var name: KKSPlayer.UniLogEvent.EventName {
    get
  }
  @objc deinit
}
extension KKSPlayer.UniLogEvent {
  public enum EventName : Swift.String {
    case none
    case playerLoading
    case playerStarted
    case playbackStarted
    case playbackBegan
    case playbackPaused
    case playbackBufferBegan
    case playbackBufferEnded
    case playbackEnded
    case playbackSeekBegan
    case playbackSeekEnded
    case videoQualityChanged
    case audioTrackChanged
    case speedChanged
    case subtitleChanged
    case playbackError
    case playbackAudioMuteChanged
    case audioVolumeChanged
    case apiVideoQualitySettingChange
    case apiSpeedChanged
    case apiAudioTrackChanged
    case apiSubtitleChanged
    case apiAudioVolumeChanged
    case apiAudioMuteChanged
    case apiPlay
    case apiPause
    case apiSeek
    case apiForward
    case apiRewind
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension KKSPlayer.UniLogEvent {
  public enum PropertyName : Swift.String {
    case playerName
    case playerModuleVersion
    case systemTime
    case userID
    case currentTime
    case duration
    case errorCode
    case bandwidth
    case width
    case height
    case playbackSpeed
    case muted
    case lang
    case volume
    case sourceType
    case qualityName
    case pseConfigured
    case pseEnabled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniAudioTrack : KKSPlayer.UniTrack {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniPlayerErrorEvent : KKSPlayer.UniPlayerEvent {
  override public var name: KKSPlayer.UniEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UniAdaptationConfig {
  final public var maxSelectableBitrate: Swift.UInt
  @objc deinit
}
extension KKSPlayer.UniPlayer {
  public var volume: Swift.Float {
    get
    set
  }
  public var isMuted: Swift.Bool {
    get
    set
  }
}
public struct RTCSourceConfig {
  public init?(url: Foundation.URL, token: Swift.String? = nil)
}
public protocol UniPlayerListener : ObjectiveC.NSObjectProtocol {
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnReadyEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPlayingEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPausedEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnTimeChangedEvent event: KKSPlayer.UniTimeChangedEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSeekEvent event: KKSPlayer.UniSeekEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSeekedEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnStallStartedEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnStallEndedEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPlaybackFinishedEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnAudioChangedEvent event: KKSPlayer.UniAudioChangedEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSubtitleChangedEvent event: KKSPlayer.UniSubtitleChangedEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSourceLoadEvent event: KKSPlayer.UniSourceLoadEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSourceLoadedEvent event: KKSPlayer.UniSourceLoadedEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveOnVideoQualityChangedEvent event: KKSPlayer.UniVideoPlaybackQualityChangedEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceivePlaybackSpeedChangedEvent event: KKSPlayer.UniPlaybackSpeedChangedEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceErrorEvent event: KKSPlayer.UniSourceErrorEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveMutedEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveUnmutedEvent event: KKSPlayer.UniEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveAudioVolumeChangedEvent event: KKSPlayer.UniAudioVolumeChangedEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceUnloadEvent event: KKSPlayer.UniSourceUnloadEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceUnloadedEvent event: KKSPlayer.UniSourceUnloadedEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveErrorEvent event: KKSPlayer.UniPlayerErrorEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveTimeShiftEvent event: KKSPlayer.UniTimeShiftEvent)
  func player(_ player: KKSPlayer.UniPlayer, didReceiveTimeShiftedEvent event: KKSPlayer.UniEvent)
}
extension KKSPlayer.UniPlayerListener {
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnReadyEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPlayingEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPausedEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnTimeChangedEvent event: KKSPlayer.UniTimeChangedEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSeekEvent event: KKSPlayer.UniSeekEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSeekedEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnStallStartedEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnStallEndedEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnPlaybackFinishedEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnAudioChangedEvent event: KKSPlayer.UniAudioChangedEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSubtitleChangedEvent event: KKSPlayer.UniSubtitleChangedEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSourceLoadEvent event: KKSPlayer.UniSourceLoadEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnSourceLoadedEvent event: KKSPlayer.UniSourceLoadedEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnVideoQualityChangedEvent event: KKSPlayer.UniVideoPlaybackQualityChangedEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceivePlaybackSpeedChangedEvent event: KKSPlayer.UniPlaybackSpeedChangedEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceErrorEvent event: KKSPlayer.UniSourceErrorEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveMutedEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveUnmutedEvent event: KKSPlayer.UniEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveAudioVolumeChangedEvent event: KKSPlayer.UniAudioVolumeChangedEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceUnloadEvent event: KKSPlayer.UniSourceUnloadEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveSourceUnloadedEvent event: KKSPlayer.UniSourceUnloadedEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveErrorEvent event: KKSPlayer.UniPlayerErrorEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveTimeShiftEvent event: KKSPlayer.UniTimeShiftEvent)
  public func player(_ player: KKSPlayer.UniPlayer, didReceiveTimeShiftedEvent event: KKSPlayer.UniEvent)
}
public protocol UniTrackProtocol {
  var url: Foundation.URL? { get }
  var label: Swift.String { get }
  var identifier: Swift.String { get }
  var isDefaultTrack: Swift.Bool { get }
  var language: Swift.String? { get }
}
@objc @_hasMissingDesignatedInitializers public class UniTrack : ObjectiveC.NSObject, KKSPlayer.UniTrackProtocol {
  public var url: Foundation.URL? {
    get
  }
  public var label: Swift.String {
    get
  }
  public var identifier: Swift.String {
    get
  }
  public var isDefaultTrack: Swift.Bool {
    get
  }
  public var language: Swift.String? {
    get
  }
  @objc deinit
}
public protocol UniPlayerViewControllerDelegate : ObjectiveC.NSObjectProtocol {
  func playerViewController(_ controller: KKSPlayer.UniPlayerViewController, didTapShareButtonWithURL url: Foundation.URL?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class UniPlayerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var player: KKSPlayer.UniPlayer?
  @_Concurrency.MainActor(unsafe) public var sourceConfig: KKSPlayer.UniSourceConfig?
  @_Concurrency.MainActor(unsafe) weak public var delegate: KKSPlayer.UniPlayerViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension KKSPlayer.UniPlayerViewController : KKSPlayer.UniUserInterfaceListener {
  @_Concurrency.MainActor(unsafe) public func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveControlViewChanged event: KKSPlayer.UniControlViewChangedEvent)
  @_Concurrency.MainActor(unsafe) public func playerView(_ view: KKSPlayer.UniPlayerView, didReceiveSettingPressed event: KKSPlayer.UniUIEvent)
}
extension KKSPlayer.UniPlayerViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
public enum SourceErrorCode : Swift.Int {
  case general
  case playbackFailed
  case drmGeneral
  case drmConfigMissing
  case noDrmLicenseServerUrlProvided
  case noDrmCertificateServerUrlProvided
  case drmLicenseRequestFailed
  case drmCertificateRequestFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class UniUITableViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol UniLoggerListener : ObjectiveC.NSObjectProtocol {
  func logEvent(_ event: KKSPlayer.UniLogEvent)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniLogger : ObjectiveC.NSObject {
  public static let shared: KKSPlayer.UniLogger
  public func add(listener: KKSPlayer.UniLoggerListener)
  public func remove(listener: KKSPlayer.UniLoggerListener)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniPlayerFactory {
  public static func create() -> KKSPlayer.UniPlayer
  public static func create(player config: KKSPlayer.UniPlayerConfig) -> KKSPlayer.UniPlayer
  @objc deinit
}
public class UniPlayerConfig {
  public var key: Swift.String?
  public var styleConfig: KKSPlayer.UniStyleConfig {
    get
  }
  public var playbackConfig: KKSPlayer.UniPlaybackConfig {
    get
  }
  public var bufferConfig: KKSPlayer.UniBufferConfig {
    get
  }
  public var adaptationConfig: KKSPlayer.UniAdaptationConfig {
    get
  }
  public var tweaksConfig: KKSPlayer.UniTweaksConfig {
    get
  }
  public init()
  @objc deinit
}
extension KKSPlayer.UniPlayer {
  public func load(source: KKSPlayer.UniSource)
  public func load(sourceConfig: KKSPlayer.UniSourceConfig)
  public func unload()
}
extension KKSPlayer.UniPlayer : KKSPlayer.UniSourceListener {
  public func source(_ source: KKSPlayer.UniSource, didReceiveSourceErrorEvent event: KKSPlayer.UniSourceErrorEvent)
}
@_hasMissingDesignatedInitializers final public class UniPlaylist {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniUIStyleConfig {
  public var trackTintColor: UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UniStyleConfig {
  final public var scalingMode: AVFoundation.AVLayerVideoGravity
  final public var uiStyleConfig: KKSPlayer.UniUIStyleConfig
  @objc deinit
}
public struct UniCommonProperty {
}
@objc @_hasMissingDesignatedInitializers public class UniPlayer : ObjectiveC.NSObject {
  public var source: KKSPlayer.UniSource? {
    get
  }
  public var playlist: KKSPlayer.UniPlaylist {
    get
  }
  public var isPlaying: Swift.Bool
  public var availableVideoQualities: [KKSPlayer.UniVideoQuality] {
    get
  }
  public var videoQuality: KKSPlayer.UniVideoQuality? {
    get
  }
  public var availableAudio: [KKSPlayer.UniAudioTrack] {
    get
  }
  public var availableSubtitles: [KKSPlayer.UniSubtitleTrack] {
    get
  }
  public var audio: KKSPlayer.UniAudioTrack? {
    get
  }
  public var subtitle: KKSPlayer.UniSubtitleTrack {
    get
  }
  public var maxSelectableBitrate: Swift.UInt {
    get
    set
  }
  public var playbackSpeed: Swift.Float {
    get
    set
  }
  public var currentTime: Foundation.TimeInterval
  public var duration: Foundation.TimeInterval {
    get
  }
  public var maxTimeShift: Foundation.TimeInterval {
    get
  }
  public var timeShift: Foundation.TimeInterval {
    get
    set
  }
  public var isLive: Swift.Bool {
    get
  }
  public var pseEnabled: Swift.Bool {
    get
    set
  }
  @objc deinit
  public func destroy()
  public func add(listener: KKSPlayer.UniPlayerListener)
  public func remove(listener: KKSPlayer.UniPlayerListener)
  public func register(_ playerLayer: AVFoundation.AVPlayerLayer)
  public func register(_ view: UIKit.UIView)
  public func unregisterPlayerLayer(_ playerLayer: AVFoundation.AVPlayerLayer)
}
extension KKSPlayer.UniPlayer : AVFoundation.AVAssetResourceLoaderDelegate {
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
}
extension KKSPlayer.UniPlayer {
  public func setAudio(track identifier: Swift.String)
  public func setSubtitle(track identifier: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class UniControllerPlayerView : KKSPlayer.UniPlayerView {
  @_Concurrency.MainActor(unsafe) override public init(player: KKSPlayer.UniPlayer, frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) override final public func player(_ player: KKSPlayer.UniPlayer, didReceiveOnReadyEvent event: KKSPlayer.UniEvent)
  @objc deinit
}
extension KKSPlayer.UniPlayer {
  public func play()
  public func pause()
  public func seek(to time: Foundation.TimeInterval)
  public func rewind(_ offset: Foundation.TimeInterval)
  public func forward(_ offset: Foundation.TimeInterval)
}
public enum UniSourceType : Swift.Int {
  case none, hls, dash
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum UniFeature : Swift.String {
  case d3
  case pse
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class UniSourceConfig {
  final public let url: Foundation.URL
  final public let type: KKSPlayer.UniSourceType
  public var title: Swift.String?
  public var sourceDescription: Swift.String?
  public var posterSource: Foundation.URL?
  public var drmConfig: KKSPlayer.UniDrmConfig?
  public var thumbnailTrack: KKSPlayer.UniThumbnailTrack?
  final public let isPSEEnabled: Swift.Bool
  public var sharedURL: Foundation.URL?
  public var features: [KKSPlayer.UniFeature]
  public init(url: Foundation.URL, type: KKSPlayer.UniSourceType = .hls)
  @objc deinit
}
extension KKSPlayer.PLLogSeverity : Swift.Equatable {}
extension KKSPlayer.PLLogSeverity : Swift.Hashable {}
extension KKSPlayer.PLLogSeverity : Swift.RawRepresentable {}
extension KKSPlayer.UniEventName : Swift.Equatable {}
extension KKSPlayer.UniEventName : Swift.Hashable {}
extension KKSPlayer.UniEventName : Swift.RawRepresentable {}
extension KKSPlayer.UniUIEventName : Swift.Equatable {}
extension KKSPlayer.UniUIEventName : Swift.Hashable {}
extension KKSPlayer.UniUIEventName : Swift.RawRepresentable {}
extension KKSPlayer.UniPlayerViewStyle : Swift.Equatable {}
extension KKSPlayer.UniPlayerViewStyle : Swift.Hashable {}
extension KKSPlayer.RTCEventName : Swift.Equatable {}
extension KKSPlayer.RTCEventName : Swift.Hashable {}
extension KKSPlayer.RTCEventName : Swift.RawRepresentable {}
extension KKSPlayer.UniLogEvent.EventName : Swift.Equatable {}
extension KKSPlayer.UniLogEvent.EventName : Swift.Hashable {}
extension KKSPlayer.UniLogEvent.EventName : Swift.RawRepresentable {}
extension KKSPlayer.UniLogEvent.PropertyName : Swift.Equatable {}
extension KKSPlayer.UniLogEvent.PropertyName : Swift.Hashable {}
extension KKSPlayer.UniLogEvent.PropertyName : Swift.RawRepresentable {}
extension KKSPlayer.SourceErrorCode : Swift.Equatable {}
extension KKSPlayer.SourceErrorCode : Swift.Hashable {}
extension KKSPlayer.SourceErrorCode : Swift.RawRepresentable {}
extension KKSPlayer.UniSourceType : Swift.Equatable {}
extension KKSPlayer.UniSourceType : Swift.Hashable {}
extension KKSPlayer.UniSourceType : Swift.RawRepresentable {}
extension KKSPlayer.UniFeature : Swift.Equatable {}
extension KKSPlayer.UniFeature : Swift.Hashable {}
extension KKSPlayer.UniFeature : Swift.RawRepresentable {}
